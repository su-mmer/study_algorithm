// Exp.h
#pragma once
#ifndef EXP_H
#define EXP_H

class Exp
{
	int j, b;
public:
	Exp();
	Exp(int a);
	Exp(int a, int b);
	int getValue();
	int getBase();
	int getExp();
	bool equals(Exp b);
};

#endif


// Exp.cpp
#include "Exp.h"
#include <iostream>
using namespace std;

Exp::Exp(): b(1), j(1) {}
Exp::Exp(int a) :b(a), j(1){}
Exp::Exp(int a, int b): b(a), j(2) {}

int Exp::getValue() {
	int num = 1;
	for (int i = 0; i < j; i++) {
		num *= b;
	}
	return num;
}

int Exp::getBase() {
	return b;
}

int Exp::getExp() {
	return j;
}

bool Exp::equals(Exp b) {
	if (getValue() == b.getValue())
		return true;
	else return false;
}


// main.cpp
#include <iostream>
#include "Exp.h"
using namespace std;

int main() {
	Exp a(3, 2);
	Exp b(9);
	Exp c;

	cout << a.getValue() << ' ' << b.getValue() << ' ' << c.getValue() << endl;
	cout << "a의 베이스" << a.getBase() << ", 지수 " << a.getExp() << endl;

	if (a.equals(b))
		cout << "same" << endl;
	else
		cout << "not same" << endl;
}
